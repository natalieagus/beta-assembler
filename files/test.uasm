start: 
ADDC(R31, 20, R9) 	| populate 20 to R9, selection of R9 is arbitrary

ST(R9, x, R31)		| store 20 at x, store is TWO cycles because our FPGA RAM requires 2 cycles to write, and make sure it's readable
||| assume other code 
||| we can't assume that R9 still contains x so we need to reload it 
LD(R31, x, R1)		| load the content of memory address x to R1
ADDC(R1, -5, R0)		| now that '20' is in R1, add it with -5, store it at R0
ST(R0, y, R31) 		| store the result (at R0) to location y
MULC(R0, 5, R0)
BEQ(R0, start, R31) | loop
HALT()
NOP()
NOP()

. = 64
LD(R31, x, R2) | test write instruction at separate address
